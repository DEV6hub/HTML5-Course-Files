Exercise 7 Creating a Quiz Application30 to 45 minutesIn this exercise, you will create a quiz application that allows the user to save andresume later. It also protects the user from losing data if he/she accidentally refreshes.Open html5-storage/Solutions/saving-quiz-challenge.html in your browser andplay with the application:A. Answer one or more questions and then refresh the browser. You will geta dialog giving you the chance to use refill the form with values stored insessionStorage:B. Press OK and your values get added back.C. Refresh again and press Cancel on the dialog. Your values do not getadded back.D. Refresh again. You don't get the JavaScript dialog because thesessionStorage key/value pairs were removed when you pressedCancel in the previous step.E. Answer one or more questions again and click theSave My Answers for Later button.F. Close and reopen the browser. You will get a dialog giving you the chanceto use refill the form with values stored in localStorage:G. If you click Cancel, the localStorage key/value pairs will be removedand you'll have to start the quiz over.H. If you click OK, the form will be refilled with your previous answers andthey will be saved into sessionStorage.I. Also notice that the footer contains the time and date the quiz answerswere last saved:This is the challenge to the exercise.2. Now open html5-storage/Exercises/saving-quiz.html in your editor.Page 120 of 180 Â© Copyright 2011 Webucator. All rights reserved.HTML5 Web Storage3. In the the addLoadEvents() function:A. Loop through the inputs and add event listeners that capture changeevents to save the associated key/value pair in sessionStorage. Don'tforget to use the prefix.B. Add an event listener to the Save button to capture a click event and callsaveAnswers.C. Call the refill() function at the end.4. Write the code in the saveAnswers() function to save all the answers inlocalStorage.5. The refill() function:A. calls hasAnswers(), which returns "session", "local", or false,depending on if and where it finds saved answers. If there are no savedanswers, it returns without doing anything.B. declares some variables:A. confirmed - we'll change it to true if the user wishes to refill theform.B. msg - the message to ask the user if he/she wants to refill the form.C. questions - the question inputsC. loops through the inputs. On the first iteration, it prompts the user withthe message. If the user clicks Cancel, the key/value pairs are deleted (viathe deleteAnswers() function) and the function returns/ends.Otherwise, we iterate through the questions. This is where you come in...D. Add code to populate the question inputs from the appropriate storagelocation (based on the value of fillFrom).*Challenge1. Notice that an external script called dateFormat.js is included. That extendsthe Date object prototype with a format() method, which you use as follows:var now = new Date();var dateMask = "yyyy-mm-dd H:MM:ss";var formattedNow = now.format(dateMask);2. Use this to write out the date last saved to the output element below the form.3. You will need to store the date in sessionStorage and localStorageas appropriate. Don't forget the prefix.4. Note that the dateMask variable is already set in the code.